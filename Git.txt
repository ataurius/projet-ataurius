    COMMANDES POUR L'INSTALLATION


sudo apt-get install git

        //installe automatiquement la dernière version
        //demande de MDP
        //demande de confirmation 

git --version

        //affiche la version installée

git config --global user.name "nomutilisateur"

        //le "--global" permet de configurer git pour tous les projets qui seront créés". A retirer pour configurer seulement un projet

git config --global user.email "emailutilisateur"

git congif --global color.diff auto

git congif --global color.status auto

git congif --global color.branch auto

git config --global core.editor vim

        //"vim" est l'éditeur fixé par défaut

git config --global merge.tool vimdiff

        //outil de merge par défaut

git config --list


    COMMANDES POUR L'UTILISATION


    1-Créer un dossier pour votre projet :

cd Documents

        //la commande cd (changedirectory) ouvre votre dossier "Documents"

mkdir ProjetAtaurius

        //la commande mkdir (makedirectory) permet de créer le dossier "ProjetAtaurius"

cd ProjetAtaurius
        
        //la commande "cd" ouvre le dossier ProjetAtaurius 


    2-Initiliser le dépôt git du projet

git init 

        //initialise le dépôt git en créant un dossier caché ".git" contenant sa config, ses objets et son pointeur
        //"git config --global init.defaultBranch <nom>" permet de configurer le nom de la branch initiale 
        //"git branch -m <nom>" permet de renommer la branche nouvellement créée


    3-Exemple : Comportement de Git  

touch index.html

        //la commande "touch" crée le fichier "index.html" 

git status 

        //permet de voir les modifications apportées dans le projet (projet préalablement initialisé avec la commande "git init") qui n'ont pas encore été indexées
        //le fichier "index.html" apparaît en rouge

git add index.html

        //ajoute la modification à l'index (ou "stage")
        //"git add *" ajoute toutes les modifications à l'index

git status

        //le fichier index.html apparaît en vert

git commit -m "message descriptif"

        //enregistre les modifications indexées par la commande "git add" : cela crée la nouvelle version de votre projet
        //Git crée la branche master

git branch

        //permet de voir que la branche "*master" vient d'être créer ("*" indique la branche sur laquelle vous travaillez actuellement) 
    

    4-Relier le dépôt local Git au dépôt distant GitHub
        
    //nécessite la création d'un compte GitHub, et d'un new repository (lien du repository à copier)
    //nécessite de créer une clé tokken (voir les "developper settings" du menu "setting" de GitHub)

git remote add ProjetAtaurius https://github.com/ataurius/projet-ataurius.git

git branch -M main

        //relie le dépôt local au dépôt distant

git push -u ProjetAtaurius main

        //envoie le projet sur le dépôt distant


    4-Gestion des branches
    
    //"git branch" affiche les branches    
    //rappel : "*" indique la branche sur laquelle vous travaillez

git branch

git branch langagejava

git branch

git checkout langagejava

git branch

touch AfficherText.txt
    
        //création d'un fichier text pour le code java d'une fonction affichant du text

git status

git add *

git commit -m "Ajout de la branche langagejava"

git push -u ProjetAtaurius langagejava

        //envoi des modification (création de la branche) au dépôt distant.
    
    
    5-Fusionner la branche nouvelle à la branche principale 

git checkout main
        //permet de se placer dans la branche main

git branch

git merge langagejava

        //modifications fusionnées


    AUTRES COMMANDES 

git clone https://github.com/ataurius/projet-ataurius.git   
        //copie un dépôt distant depuis GitHub

git pull ProjetAtaurius main
        //permet de voir s'il y a des MAJ depuis le dépôt distant à intégrer dans le dépôt local

git branch -d langagejava
        //supprime la branche "langagejava"

git branch -M main
        //renomme la branche principale "master" en "main" [!!! à vérifier !!!]

git branch -D langagejava
        //supprime la branche avec ses modifications éventuellement effectuer

git commit --amend -m "Votre nouveau message de commit"
        //permet de modifier le message du dernier commit s'il n'y a eu aucune modification
        //entrer "git log" pour vérifier

git reset --soft 
        //ne supprime aucun fichier, ramène aux fichiers "stagés" avant le commit

git reset --mixed 
        //ramène en arrière, après un commit, jusqu'au dernier commit (aucune suppression effetué non plus)
        //paramètre par défaut de git reset ("git reset HEAD~" = "git reset --mixed HEAD~")
            // le "HEAD" est un pointeur

git reset --hard 
        //supprime définitvement tout le dernier commit (ATTENTION !! aucun retour en arrière possible !!)


    PROTOCOLES

    
    1-Annuler une modification de la branche main (sans commit effectué)

        //la modification a été ajoutée à l'index MAIS n'a pas été "committée"

git status

git stash

        //va mettre de coté la dernière indexation (dernier "staging")

git status

        //indiquera qu'aucune modification a été apportée

git branch nomdelabranche

git checkout nomdelabranche

git stash list

    //copier la remise souhaitée (juste le début de pattern "stash@{1}:...")

git stash apply nomdelaremise


    2-Annuler une modification de la branche main (avec commit effectué) pour la transférer à une branche (à créer)

git log

    //affiche l'historique des commit avec leur identifiant ("hash") (exemple : commit 88af3e1ebc7b24e111a28d51527a290e798f3ea2)

git reset --hard HEAD^

        //supprime le dernier commit de la branche principale

git branch nouvellebranche

git checkout nouvellebranche

git reset --hard 88af3e1e

        //les 8 premiers caractères suffisent


    3-Insérer un fichier oublié dans le dernier commit effectué

git add Nomdufichier.extension

git status

git commit --amend --no-edit


    4-Retirer un mauvais fichier du dernier commit effectué

git revert HEAD

        //revient à l'état précédent avant le dernier commit, sans le supprimer
        //vous créerez donc un nouveau commit avec l'ancien commit dans l'historique
        //vous pouvez supprimer un fichier, puis faire le nouveau commit


    5-Voyager dans le temps avec Git

git log
    
        //retrace l'historique inversé de tout vos commit
        //vous permez d'obtenir le SHA (Secure Hash Algorithm) des commit

git reflog

        //affiche les commits ainsi que toutes les autres actions que vous avez pu faire en local 

git blame MonFichier.txt

        //retrace tout l'historique, ligne par ligne, du fichier "MonFichier.txt" (qui a écrit, quoi, quand, etc = mode super espion)


    6-Fonction Cherry pick de Git

    //permet de ne sélectionner qu'une partie d'une branche (sélection un ou pls commit) pour la fusionner à la branche principale

git log
    
        //sélectionner le hash du commit (8 premiers caractères)

git cherry-pick hashducommit

        //intègre le commit choisi à la branche principale

git log

        //pour vérifier l'intégration du commit
    

    NOTES

    1-Création de branche principale  : après avoir créer un dossier de projet et avoir initialisé le dépôt avec la commande "git init", il suffi de créer un fichier et de le "committer". La branche "main" est créée automatiquement.

    2-la branche principale est nommée automatiquement "main" depuis octobre 2020 ; avant elle s'appelait "master".


