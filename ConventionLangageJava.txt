
Convtion Camel Case : une phrase composée de plusieurs mots sans espaces ni ponctuation (premier mot en minuscules et les autres commencent par une majuscule)

NOMMER UNE VARIABLE : nomVariableProgramme

NOMMER UNE CONSTANTE : NOMVARIABLEPROGRAMME


DECLARER UNE VARIABLE : (logique : TYPE + VARIABLE + VALEUR)
    - "int" déclare un nombre entier : exemple "int x = 7;"
    - "String" déclare une chaîne de caractères : exemple "String text = "Bonjour tout le monde !"
    - "double" déclare un nombre avec décimaux : exemple "double y = 1,777
    - "float" déclare un nombre avec moins de décimaux que "double"
    - "long" déclare un nombre entier plus grand que celui que "int" peut déclarer
    -

DECLARER UNE CONSTANTE : 
    - "final int JOURSDANSSEMAINE = 7"
    - "final String MONPLATFAVORI = Pâte à la sauce tomate"

FIN D'INSTRUCTION JAVA : ";"

COMMENTAIRES : indiquer par "//" avant le commentaire

OPERATEUR D'AFFECTATION : "="

AFFECTATION : consiste à donner à une variable ("int x") une expression ("7") grâce à un opérateur d'affectation ("=")

OPERATEURS D'AFFECTATION RACCOURCIS : 
    - "int x = x + 23" rpeut être écrit "int x+= 23"

BOOLEAN : Une valeur booléenne prend le plus petit emplacement de la mémoire de l'ordinateur : 1 bit (un bit ne peut avoir qu'une seule valeur : 0 ou 1 ; 8 bits = 1 octet ;  1000 octet = 1 024 bits). La valeur d'un boolean est "true" ou "false". Cette valeur peut être inversée par le Non logique "!" : exemple "boolean nomBool = true" : "nomBool = !nomBool" inversera la valeur true en valeur false

FONCTION : bloc de code avec un nom, qui exécute un service

METHODE : fonction située à l'intérieur d'une classe



equals : méthode de class String pour comaprer deux chaînes (compare le contenu) : peut être utilsiée comme condition

OPERATEURS DE COMPARAISON :
==  égal à (exactement le même) ;

!=  non égal à (différent, de quelque façon que ce soit) ;

<  inférieur à ;

<=  inférieur ou égal à ;

>  supérieur à ;

>=  supérieur ou égal à

OPERATEURS LOGIQUES : permettent de combiner des valeurs booléennes (soit des valeurs booléennes spécifiques, soit des résultats d'expressions)
    && (ET logique) : le résultat n'est vrai que si toutes les parties participantes sont vraies.

    ||  (OU logique) : le résultat est vrai si au moins une des parties participantes est vraie.

    !  (NON logique) : inverse simplement l'expression donnée.






SYNTAXE : 


for (initialisation; terminaison; increment) {
// code à répéter
}


while (logicalExpression) {
// liste de déclarations
}


do {
// instructions
} while(logicalExpression);
